// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackR.DataContext.SQL;

#nullable disable

namespace TrackR.DataContext.SQL.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20230713130054_Added Owner field to subtasks")]
    partial class AddedOwnerfieldtosubtasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.5.23280.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackR.Models.SQL.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("BoardId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            BoardId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3520),
                            Issue = "Build the data models for SQL database",
                            SectionId = 2,
                            Title = "Build SQL Data Models",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3520),
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 2,
                            BoardId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3530),
                            Issue = "Build the frontend in blazor",
                            SectionId = 1,
                            Title = "Build View",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3530),
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 3,
                            BoardId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3530),
                            Issue = "Build the db context for SQL database",
                            SectionId = 3,
                            Title = "Build SQL Data Context",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3540),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TrackR.Models.SQL.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            BoardId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3440),
                            Name = "TrackR",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3480)
                        });
                });

            modelBuilder.Entity("TrackR.Models.SQL.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3910),
                            Name = "TODO",
                            Position = 1,
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3910)
                        },
                        new
                        {
                            SectionId = 2,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3910),
                            Name = "Doing",
                            Position = 2,
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3920)
                        },
                        new
                        {
                            SectionId = 3,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3920),
                            Name = "Done",
                            Position = 3,
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3920)
                        });
                });

            modelBuilder.Entity("TrackR.Models.SQL.Subtask", b =>
                {
                    b.Property<int>("SubtaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubtaskId"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubtaskId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Subtasks");

                    b.HasData(
                        new
                        {
                            SubtaskId = 1,
                            Completed = true,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3570),
                            Issue = "Build out the model for boards",
                            SectionId = 3,
                            TaskId = 1,
                            Title = "Board Model",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            SubtaskId = 2,
                            Completed = false,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3580),
                            Issue = "Build out the model for user",
                            SectionId = 2,
                            TaskId = 1,
                            Title = "User Model",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3580)
                        },
                        new
                        {
                            SubtaskId = 3,
                            Completed = false,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3590),
                            Issue = "Build out the activity for boards",
                            SectionId = 1,
                            TaskId = 1,
                            Title = "Activity Model",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3760)
                        },
                        new
                        {
                            SubtaskId = 4,
                            Completed = true,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3780),
                            Issue = "Build out the Subtask for user",
                            SectionId = 3,
                            TaskId = 1,
                            Title = "Subtask Model",
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3780)
                        });
                });

            modelBuilder.Entity("TrackR.Models.SQL.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3120),
                            Email = "Joseph.Huntley@outlook.com",
                            FirstName = "Joseph",
                            LastName = "Huntley",
                            Password = "3ACDE2D1E1544CD4810B91067AD50C7183A3BCB0F60C54B9412DDAF221A4BC46EB50BF2AABCCC572F8C2221B5D7434A5FA58C09C62849DDEB6D7758DC181B8EE",
                            Salt = new byte[] { 158, 211, 216, 250, 17, 184, 56, 91, 183, 195, 255, 144, 136, 139, 15, 215, 103, 224, 86, 225, 104, 95, 81, 42, 92, 40, 144, 254, 161, 13, 45, 14, 165, 95, 254, 12, 230, 205, 103, 179, 247, 39, 216, 187, 180, 177, 59, 96, 134, 227, 80, 25, 82, 219, 138, 64, 1, 7, 7, 178, 218, 33, 38, 157 },
                            UpdatedDate = new DateTime(2023, 7, 13, 9, 0, 54, 861, DateTimeKind.Local).AddTicks(3200)
                        });
                });

            modelBuilder.Entity("TrackR.Models.SQL.Activity", b =>
                {
                    b.HasOne("TrackR.Models.SQL.Board", "Parent")
                        .WithMany("Tasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackR.Models.SQL.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackR.Models.SQL.User", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");

                    b.Navigation("Parent");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TrackR.Models.SQL.Subtask", b =>
                {
                    b.HasOne("TrackR.Models.SQL.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("TrackR.Models.SQL.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackR.Models.SQL.Activity", "Parent")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Parent");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TrackR.Models.SQL.Activity", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("TrackR.Models.SQL.Board", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
